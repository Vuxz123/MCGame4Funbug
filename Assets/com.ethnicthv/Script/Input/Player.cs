//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/com.ethnicthv/Script/Input/Player.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace com.ethnicthv.Script.Input
{
    public partial class @Player: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Player()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player"",
    ""maps"": [
        {
            ""name"": ""Input"",
            ""id"": ""320a56f9-7957-4629-a325-542f2d831ad8"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""3e624943-8128-4daf-8ecd-4ce4ead6e850"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ClickPosition"",
                    ""type"": ""Value"",
                    ""id"": ""25532c28-30b1-4471-8fdc-bfe20aaf4d3d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7c194f5e-9097-494c-91b3-1ce953bb1f4f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ccda336b-bcbf-435f-83bb-139de3989001"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClickPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Input
            m_Input = asset.FindActionMap("Input", throwIfNotFound: true);
            m_Input_Click = m_Input.FindAction("Click", throwIfNotFound: true);
            m_Input_ClickPosition = m_Input.FindAction("ClickPosition", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Input
        private readonly InputActionMap m_Input;
        private List<IInputActions> m_InputActionsCallbackInterfaces = new List<IInputActions>();
        private readonly InputAction m_Input_Click;
        private readonly InputAction m_Input_ClickPosition;
        public struct InputActions
        {
            private @Player m_Wrapper;
            public InputActions(@Player wrapper) { m_Wrapper = wrapper; }
            public InputAction @Click => m_Wrapper.m_Input_Click;
            public InputAction @ClickPosition => m_Wrapper.m_Input_ClickPosition;
            public InputActionMap Get() { return m_Wrapper.m_Input; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(InputActions set) { return set.Get(); }
            public void AddCallbacks(IInputActions instance)
            {
                if (instance == null || m_Wrapper.m_InputActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_InputActionsCallbackInterfaces.Add(instance);
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @ClickPosition.started += instance.OnClickPosition;
                @ClickPosition.performed += instance.OnClickPosition;
                @ClickPosition.canceled += instance.OnClickPosition;
            }

            private void UnregisterCallbacks(IInputActions instance)
            {
                @Click.started -= instance.OnClick;
                @Click.performed -= instance.OnClick;
                @Click.canceled -= instance.OnClick;
                @ClickPosition.started -= instance.OnClickPosition;
                @ClickPosition.performed -= instance.OnClickPosition;
                @ClickPosition.canceled -= instance.OnClickPosition;
            }

            public void RemoveCallbacks(IInputActions instance)
            {
                if (m_Wrapper.m_InputActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IInputActions instance)
            {
                foreach (var item in m_Wrapper.m_InputActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_InputActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public InputActions @Input => new InputActions(this);
        public interface IInputActions
        {
            void OnClick(InputAction.CallbackContext context);
            void OnClickPosition(InputAction.CallbackContext context);
        }
    }
}
